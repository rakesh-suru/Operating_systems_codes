#include <stdio.h>

void findWaitingTime(int processes[], int n, int bt[], int wt[], int at[], int quantum) {
    int rt[n];
    for (int i = 0; i < n; i++) {
        rt[i] = bt[i];
    }

    int t = 0;
    int completed = 0;
    while (completed < n) {
        int done = 1;
        for (int i = 0; i < n; i++) {
            if (rt[i] > 0 && at[i] <= t) {
                done = 0;
                if (rt[i] > quantum) {
                    t += quantum;
                    rt[i] -= quantum;
                } else {
                    t += rt[i];
                    wt[i] = t - bt[i] - at[i];
                    rt[i] = 0;
                    completed++;
                }
            }
        }
        if (done == 1) {
            t++;
        }
    }
}

void findTurnAroundTime(int processes[], int n, int bt[], int wt[], int tat[]) {
    for (int i = 0; i < n; i++) {
        tat[i] = bt[i] + wt[i];
    }
}

void findAvgTime(int processes[], int n, int bt[], int at[], int quantum) {
    int wt[n], tat[n], total_wt = 0, total_tat = 0;

    findWaitingTime(processes, n, bt, wt, at, quantum);
    findTurnAroundTime(processes, n, bt, wt, tat);

    printf("Processes\tArrival time\tBurst time\tWaiting time\tTurn around time\n");

    for (int i = 0; i < n; i++) {
        total_wt += wt[i];
        total_tat += tat[i];
        printf(" %d\t\t%d\t\t%d\t\t%d\t\t%d\n", i + 1, at[i], bt[i], wt[i], tat[i]);
    }

    printf("Average waiting time = %.2f\n", (float)total_wt / n);
    printf("Average turn around time = %.2f\n", (float)total_tat / n);
}

int main() {
    int processes[] = {1, 2, 3};
    int n = sizeof(processes) / sizeof(processes[0]);

    int burst_time[] = {10, 5, 8};
    int arrival_time[] = {0, 1, 2};
    int quantum = 2;

    findAvgTime(processes, n, burst_time, arrival_time, quantum);

    return 0;
}
