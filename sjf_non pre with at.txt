#include <stdio.h>

void findWaitingTime(int processes[], int n, int bt[], int wt[], int at[]) {
    int completed[n];
    int t = 0, min_bt, min_bt_index;

    for (int i = 0; i < n; i++) {
        completed[i] = 0;
    }

    for (int i = 0; i < n; i++) {
        min_bt = 10000;
        min_bt_index = -1;

        for (int j = 0; j < n; j++) {
            if (at[j] <= t && completed[j] == 0 && bt[j] < min_bt) {
                min_bt = bt[j];
                min_bt_index = j;
            }
        }

        if (min_bt_index != -1) {
            t += bt[min_bt_index];
            wt[min_bt_index] = t - at[min_bt_index] - bt[min_bt_index];
            if (wt[min_bt_index] < 0) {
                wt[min_bt_index] = 0;
            }
            completed[min_bt_index] = 1;
        } else {
            t++;
            i--;
        }
    }
}

void findTurnAroundTime(int processes[], int n, int bt[], int wt[], int tat[]) {
    for (int i = 0; i < n; i++) {
        tat[i] = bt[i] + wt[i];
    }
}

void findAvgTime(int processes[], int n, int bt[], int at[]) {
    int wt[n], tat[n];
    int total_wt = 0, total_tat = 0;

    findWaitingTime(processes, n, bt, wt, at);
    findTurnAroundTime(processes, n, bt, wt, tat);

    printf("Processes\tArrival time\tBurst time\tWaiting time\tTurn around time\n");

    for (int i = 0; i < n; i++) {
        total_wt += wt[i];
        total_tat += tat[i];
        printf(" %d\t\t%d\t\t%d\t\t%d\t\t%d\n", i + 1, at[i], bt[i], wt[i], tat[i]);
    }

    printf("Average waiting time = %.2f\n", (float)total_wt / n);
    printf("Average turn around time = %.2f\n", (float)total_tat / n);
}

int main() {
    int processes[] = {1, 2, 3, 4, 5};
    int n = sizeof(processes) / sizeof(processes[0]);

    int burst_time[] = {1,5,1,6,3};
    int arrival_time[] = {2,1,4,0,2};

    findAvgTime(processes, n, burst_time, arrival_time);

    return 0;
}